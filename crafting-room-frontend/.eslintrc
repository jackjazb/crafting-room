{
  "ignorePatterns": [
    "**/dist/**/*"
  ],
  "root": true,
  "env": {
    "browser": true,
    "es6": true,
    "node": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:import/recommended",
    "plugin:import/typescript", // extends the parent `../.eslint` config,
    "plugin:@next/next/recommended", // and adds nextjs,
    "plugin:react/recommended" // and react plugins
  ],
  "plugins": [
    "@typescript-eslint",
    "import",
    "sort-exports",
    "eslint-plugin-tsdoc",
    "@next/eslint-plugin-next",
    "eslint-plugin-react"
  ],
  "parserOptions": {
    "parser": "@typescript-eslint/parser",
    "project": "./tsconfig.json",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [
        ".ts",
        ".tsx"
      ]
    },
    "import/resolver": {
      "typescript": {
        "project": "./tsconfig.json",
        "alwaysTryTypes": true //always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`
      }
    },
    "react": {
      "version": "detect"
    }
  },
  "rules": {
    "tsdoc/syntax": "warn",
    "import/order": [
      "error"
    ],
    "import/newline-after-import": [
      "error",
      {
        "count": 1,
        "exactCount": true,
        "considerComments": true
      }
    ],
    "import/no-useless-path-segments": [
      "error",
      {
        "noUselessIndex": true
      }
    ],
    "sort-exports/sort-exports": [
      "error",
      {
        "sortDir": "asc",
        "pattern": "**/index.ts"
      }
    ],
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/semi": "error",
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        "multiline": {
          "delimiter": "semi",
          "requireLast": true
        },
        "singleline": {
          "delimiter": "semi",
          "requireLast": true
        }
      }
    ],
    "@typescript-eslint/promise-function-async": "error",
    "@typescript-eslint/unbound-method": [
      "error",
      {
        "ignoreStatic": true
      }
    ],
    "@typescript-eslint/consistent-type-imports": "error",
    "quote-props": [
      "error",
      "consistent-as-needed"
    ],
    "semi": "error",
    "no-extra-semi": "error",
    "quotes": [
      "error",
      "single"
    ],
    "jsx-quotes": [
      "error",
      "prefer-single"
    ],
    "arrow-parens": [
      "error",
      "as-needed"
    ],
    "newline-per-chained-call": "off",
    "array-element-newline": "off",
    "function-paren-newline": [
      "error",
      "consistent"
    ],
    "function-call-argument-newline": [
      "error",
      "consistent"
    ],
    "comma-dangle": [
      "error",
      "never"
    ],
    "nonblock-statement-body-position": [
      "error",
      "below"
    ],
    "eqeqeq": "error",
    "max-len": [
      "error",
      {
        "code": 120,
        "tabWidth": 4,
        // "comments": 75,
        "ignoreComments": true,
        "ignoreTrailingComments": true,
        "ignoreUrls": true,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true,
        "ignoreRegExpLiterals": true
      }
    ],
    "no-trailing-spaces": "error",
    "object-shorthand": [
      "error",
      "always"
    ],
    "object-property-newline": [
      "error",
      {
        "allowAllPropertiesOnSameLine": true
      }
    ],
    "lines-between-class-members": [
      "error",
      "always",
      {
        "exceptAfterSingleLine": true
      }
    ],
    "eol-last": [
      "error",
      "always"
    ],
    // "sort-imports": "error"
    "react/react-in-jsx-scope": "off",
    "react/jsx-first-prop-new-line": [
      "error",
      "multiline"
    ],
    "react/jsx-max-props-per-line": [
      "error",
      {
        "maximum": 1
      }
    ],
    "react/jsx-closing-tag-location": "error",
    "react/jsx-tag-spacing": [
      "error",
      {
        "closingSlash": "never",
        "beforeSelfClosing": "always",
        "afterOpening": "never",
        "beforeClosing": "never"
      }
    ],
    "react/self-closing-comp": [
      "error",
      {
        "component": true,
        "html": true
      }
    ],
    "react/jsx-sort-props": [
      "error",
      {
        "callbacksLast": true,
        // "shorthandLast": false,
        "reservedFirst": true,
        "ignoreCase": true,
        "noSortAlphabetically": true
      }
    ],
    "react/jsx-one-expression-per-line": [
      "error",
      {
        "allow": "none"
      }
    ], //single-child
    "react/jsx-wrap-multilines": [
      "error",
      {
        "declaration": "parens-new-line",
        "assignment": "parens-new-line",
        "return": "parens-new-line",
        "arrow": "parens-new-line",
        "condition": "parens-new-line",
        "logical": "parens-new-line",
        "prop": "parens-new-line"
      }
    ],
    "react/style-prop-object": "error",
    "react/jsx-no-useless-fragment": "error",
    "react/jsx-pascal-case": "error",
    "react/jsx-closing-bracket-location": [
      "error",
      {
        "selfClosing": "tag-aligned",
        "nonEmpty": "tag-aligned"
      }
    ],
    "react/jsx-curly-brace-presence": [
      "error",
      {
        "props": "never",
        "children": "never"
      }
    ],
    "react/jsx-equals-spacing": "error",
    "react/prop-types": "off" //`NextPage` type has a meltdown without this
  }
}